// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "firebase.google.com/go/auth"

	mock "github.com/stretchr/testify/mock"

	userModel "washit-api/internal/user/dto/model"

	userRequest "washit-api/internal/user/dto/request"
)

// IUserService is an autogenerated mock type for the IUserService type
type IUserService struct {
	mock.Mock
}

// BanUser provides a mock function with given fields: c, userId
func (_m *IUserService) BanUser(c context.Context, userId string) (*userModel.User, error) {
	ret := _m.Called(c, userId)

	if len(ret) == 0 {
		panic("no return value specified for BanUser")
	}

	var r0 *userModel.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*userModel.User, error)); ok {
		return rf(c, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *userModel.User); ok {
		r0 = rf(c, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userModel.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBannedUsers provides a mock function with given fields: c
func (_m *IUserService) GetBannedUsers(c context.Context) ([]*userModel.User, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetBannedUsers")
	}

	var r0 []*userModel.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*userModel.User, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*userModel.User); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*userModel.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMe provides a mock function with given fields: c, userId
func (_m *IUserService) GetMe(c context.Context, userId string) (*userModel.User, error) {
	ret := _m.Called(c, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetMe")
	}

	var r0 *userModel.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*userModel.User, error)); ok {
		return rf(c, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *userModel.User); ok {
		r0 = rf(c, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userModel.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: c, userId
func (_m *IUserService) GetUserByID(c context.Context, userId string) (*userModel.User, error) {
	ret := _m.Called(c, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *userModel.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*userModel.User, error)); ok {
		return rf(c, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *userModel.User); ok {
		r0 = rf(c, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userModel.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: c
func (_m *IUserService) GetUsers(c context.Context) ([]*userModel.User, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []*userModel.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*userModel.User, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*userModel.User); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*userModel.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: c, req
func (_m *IUserService) Login(c context.Context, req *userRequest.Login) (*userModel.User, interface{}, interface{}, error) {
	ret := _m.Called(c, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *userModel.User
	var r1 interface{}
	var r2 interface{}
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, *userRequest.Login) (*userModel.User, interface{}, interface{}, error)); ok {
		return rf(c, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *userRequest.Login) *userModel.User); ok {
		r0 = rf(c, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userModel.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *userRequest.Login) interface{}); ok {
		r1 = rf(c, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *userRequest.Login) interface{}); ok {
		r2 = rf(c, req)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(interface{})
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, *userRequest.Login) error); ok {
		r3 = rf(c, req)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// LoginWithGoogle provides a mock function with given fields: c, req, userInfo
func (_m *IUserService) LoginWithGoogle(c context.Context, req *userRequest.Google, userInfo *auth.UserInfo) (*userModel.User, interface{}, interface{}, error) {
	ret := _m.Called(c, req, userInfo)

	if len(ret) == 0 {
		panic("no return value specified for LoginWithGoogle")
	}

	var r0 *userModel.User
	var r1 interface{}
	var r2 interface{}
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, *userRequest.Google, *auth.UserInfo) (*userModel.User, interface{}, interface{}, error)); ok {
		return rf(c, req, userInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *userRequest.Google, *auth.UserInfo) *userModel.User); ok {
		r0 = rf(c, req, userInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userModel.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *userRequest.Google, *auth.UserInfo) interface{}); ok {
		r1 = rf(c, req, userInfo)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *userRequest.Google, *auth.UserInfo) interface{}); ok {
		r2 = rf(c, req, userInfo)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(interface{})
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, *userRequest.Google, *auth.UserInfo) error); ok {
		r3 = rf(c, req, userInfo)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Logout provides a mock function with given fields: c, userId
func (_m *IUserService) Logout(c context.Context, userId string) error {
	ret := _m.Called(c, userId)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshToken provides a mock function with given fields: c, userId
func (_m *IUserService) RefreshToken(c context.Context, userId string) (string, error) {
	ret := _m.Called(c, userId)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(c, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(c, userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: c, req
func (_m *IUserService) Register(c context.Context, req *userRequest.Register) (*userModel.User, error) {
	ret := _m.Called(c, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *userModel.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *userRequest.Register) (*userModel.User, error)); ok {
		return rf(c, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *userRequest.Register) *userModel.User); ok {
		r0 = rf(c, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userModel.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *userRequest.Register) error); ok {
		r1 = rf(c, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnbanUser provides a mock function with given fields: c, userId
func (_m *IUserService) UnbanUser(c context.Context, userId string) (*userModel.User, error) {
	ret := _m.Called(c, userId)

	if len(ret) == 0 {
		panic("no return value specified for UnbanUser")
	}

	var r0 *userModel.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*userModel.User, error)); ok {
		return rf(c, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *userModel.User); ok {
		r0 = rf(c, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userModel.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: c, userId, req
func (_m *IUserService) UpdatePassword(c context.Context, userId string, req *userRequest.UpdatePassword) error {
	ret := _m.Called(c, userId, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *userRequest.UpdatePassword) error); ok {
		r0 = rf(c, userId, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: c, userId, req
func (_m *IUserService) UpdateProfile(c context.Context, userId string, req *userRequest.UpdateProfile) (*userModel.User, error) {
	ret := _m.Called(c, userId, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 *userModel.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *userRequest.UpdateProfile) (*userModel.User, error)); ok {
		return rf(c, userId, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *userRequest.UpdateProfile) *userModel.User); ok {
		r0 = rf(c, userId, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userModel.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *userRequest.UpdateProfile) error); ok {
		r1 = rf(c, userId, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserService creates a new instance of IUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserService {
	mock := &IUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
